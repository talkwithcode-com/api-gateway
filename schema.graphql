type Question {
  _id: ID
  title: String
  score: String
  description: String
  user_id: String
  sample_solution: [SampleSolution]
  solution: [Solution]
}

type SampleSolution {
  _id: ID
  input: String
  output: String
}

type Solution {
  _id: ID
  input: String
  output: String
}

type Code {
  _id: ID
  user: String
  content: String
}

type Decode {
  time_start: String!
  time_end: String!
  user_id: String!
  questions: [String]!
}

type User {
  _id: ID!
  name: String!
  email: String!
  password: String!
}

type Query {
  questions(access_token: String): [Question]

  question(_id: String, access_token: String): Question

  code: Code
  codes: [Code]
}

type Mutation {
  addQuestion(
    timeLimit: Float
    title: String
    score: String
    description: String
    user_id: String
    access_token: String
  ): Question
  deleteQuestion(question_id: ID, access_token: String): String
  updateQuestion(
    question_id: ID
    timeLimit: Float
    title: String
    score: String
    description: String
    access_token: String
  ): Question

  addSampleSolution(
    input: String
    output: String
    question_id: String
    access_token: String
  ): SampleSolution

  addSolution(
    input: String
    output: String
    question_id: String
    access_token: String
  ): Solution

  deleteSolution(
    access_token: String
    question_id: String
    solution_id: String
  ): String

  register(name: String!, email: String!, password: String!): String!
  login(email: String!, password: String!): String!

  postCode(user: String!, content: String!): ID!
  addChannelToken(
    time_start: String!
    time_end: String!
    user_id: String!
    ids: String!
  ): String!

  validateChannelToken(key: String!, access_token: String!): Decode

  runCode(access_token: String!, data: RunCodeInput!): Result!
}

input RunCodeInput {
  question_id: String!
  source_code: String!
  lang: String!
}

type Result {
  language: String!
  logs: [Log]
}

type Log {
  id: ID!
  status: String!
  stderr: String!
  stdout: String!
  stdin: String!
}

type Subscription {
  code: Code
}
